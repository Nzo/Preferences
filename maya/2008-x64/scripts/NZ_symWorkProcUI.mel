//-----------------------------------------------------------------------------------------------
global proc NZ_symWorkProcUI()
{
waitCursor -state on;
string 	$window = "copyShapeProcSelectWindow";
if (!`window -exists $window`)
	makeCopyShapeProcSelectWindow($window);

showWindow $window;
waitCursor -state off;
};

//-----------------------------------------------------------------------------------------------

global proc makeCopyShapeProcSelectWindow(string $window){
	
	window -title "Symmetrical Work Window Procedure"
	-titleBar true
	-minimizeButton true
	-maximizeButton false
	-sizeable true
	-widthHeight 500 700

	$window;

	columnLayout   -rs 10 -adjustableColumn true;
		frameLayout -labelVisible false -marginWidth 10 -marginHeight 5 frameLayoutA;
			columnLayout -rs 5 -adjustableColumn true;
			textFieldButtonGrp -l " Base Shape" -bl "    Select    " -ed false -cw3 100 170 100  -cal 1 left
				-bc "updateSourceShapeName()" sourceShapeNameStr; 
			separator;			
			radioButtonGrp
			-label "Direction"
			-numberOfRadioButtons 3
			-label1 "X"
			-label2 "Y"
			-label3 "Z" 
			-cc1 "checkBoxGrp -e -label1 \"(-X to +X)\" inverseMirrorSelection"
			-cc2 "checkBoxGrp -e -label1 \"(-Y to +Y)\" inverseMirrorSelection"
			-cc3 "checkBoxGrp -e -label1 \"(-Z to +Z)\" inverseMirrorSelection"
			axisRadioMirrorSelection;
			
			radioButtonGrp -nrb 2 -cw3 100 75 75 -cal 1 left -l "Geometry/Selection" -la2 "Copy" "Exchange" 
										-on2 "checkBoxGrp -e -enable 0 inverseMirrorSelection" 
										-on1 "checkBoxGrp -e -enable 1 inverseMirrorSelection" 
										-sl 1 addReplaceStr;
			
			checkBoxGrp
						-label "Direction"
						-label1 ""
						-numberOfCheckBoxes 1
						inverseMirrorSelection;
			separator;
			
			floatSliderGrp  -cw  1 100 -cal 1 left  -l "Tolerance" -f true -min 0 -max 10 
					 -fmn 0.0 -fmx 0.1 -pre 5  -ss 0.01 -v 0.001 toleranceStr;
			separator;
			rowLayout -numberOfColumns 2
			-columnAlign2 "center" "center"
			-columnAttach2 "both" "both" 
			-columnWidth2 175 175 
			-columnOffset2 0 15 ; 
			
			button 
			-l "Apply Geometry"
			-c "NZ_ApplyUI()";
			
			button
			-l "Apply Selection" 
			-c "NZ_doMirrorSelection()";
				setParent..;
			setParent..;	
		setParent..;	

		frameLayout -labelVisible false -marginWidth 10 -marginHeight 5 frameLayoutB;
			columnLayout -rs 5 -adjustableColumn true;
			textFieldButtonGrp -l "Source Geometry" -bl "    Select    " -ed false -cw3 100 170 100  -cal 1 left
						-bc "updateFromShapeName()" fromShapeNameStr; 
			textFieldButtonGrp -l "Target Selection" -bl "    Select    " -ed false -cw3 100 170 100  -cal 1 left
						-bc "updateSourceSelectionNameProc()" sourceSelectNameProcStr; 		    


			separator;

			rowLayout -numberOfColumns 2
			-columnAlign2 "center" "center"
			-columnAttach2 "both" "both" 
			-columnWidth2 175 175 
			-columnOffset2 0 15; 

			button -l "Transfer Selection" -c "NZ_copySelectionProc()";

			button -l "Copy Geometry" -c "NZ_copyShape()";


				setParent ..;
			setParent ..;
		setParent ..;

		frameLayout -labelVisible false -marginWidth 10 -marginHeight 5 frameLayoutC;
			columnLayout -rs 5 -adjustableColumn true;


			checkBoxGrp
						-label "Non Symmetrical"
						-label1 ""
						-numberOfCheckBoxes 1
						doCorrectiveShapeNonSymetrical;

			textFieldButtonGrp -l "Set Selection" -bl "    Select    " -ed false -cw3 100 170 100  -cal 1 left
						-bc "updateSourceSetSelectionName()" sourceSetSelectNameStr; 
			

			separator;

			button -l "Apply Procedure" -c "NZ_ApplyProcUI";

				setParent ..;
			setParent ..;
		setParent ..;

		separator;

		button 
		-l "Close"
	-c ("window -e -vis 0 " + $window);

}

//-----------------------------------------------------------------------------------------------

global proc int NZ_copyShape()
{
	string $objects[];
	
	NZ_copySelectionInverse ();
	
	$objects[0] = `textFieldButtonGrp -q -tx sourceSelectNameProcStr`;
	
	string $shapes[] = `ls -dag -s $objects`;
	
	string $cp[] = `filterExpand -sm 31 -sm 28`;
	
	int $cpSize = size($cp);
	
	if (!((($cpSize == 0) && (size($objects) > 1)) || (($cpSize > 0) && (size($objects) > 0))))
		error("Select source object or its components and destination object(s)!");
		
	if (1 < ((size(`ls -type mesh $shapes`) > 0) +
		(size(`ls -type nurbsSurface $shapes`) > 0) +
		(size(`ls -type nurbsCurve $shapes`) > 0)))
		error("Select the same type objects only!");
	
	string $cpShape[] = `listRelatives -p -f $cp`;
	$cpShape = `stringArrayRemoveDuplicates $cpShape`;
		
	if (size($cpShape) > 1)
		error("Select Vertices of single object!");

	string $cpType[] = `ls -st $cpShape[0]`;
	string $objectsType[] = `ls -st $shapes[0]`;

	if (($cpSize > 0) && ($objectsType[1] != $cpType[1]))
		error("Select the same type objects only!");
	
	waitCursor -state 1;
	
	string $nameTarget, $nameSource;
	
	if ($cpSize == 0)
	{	$nameSource = $shapes[0];
		$cp = `ls -fl ($nameSource + ".cp[*]")`;
		$cpSize = size($cp);
		$objects = `ls -tail (size($objects) -1) $objects`;
	}
	else
		$nameSource = $cpShape[0];
	
	int $cpLink[];
	string $index[];
	
	if ($objectsType[1] != "nurbsSurface")
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			$cpLink[$i] = int($index[1]);
		}
	else
	{	$cpInV = `getAttr ($nameSource + ".spansV")` + `getAttr ($nameSource + ".degreeV")`;
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			$cpLink[$i] = $cpInV * int($index[1]) + int($index[2]);
		}
	}
	
	float $cpBuf[3];
	vector $cpTarget;
	int $cpSizeTarget;
	int $cpSizeModify;



string $window = `window -title "Calcul en cours..." -widthHeight 310 50 Loading`;
		columnLayout;

    	string $progressControl = `progressBar -maxValue $cpSize -width 300`;

		showWindow $window;



	
	for ($nameTarget in $objects)
	{
		$cpSizeTarget = `getAttr -size ($nameTarget + ".cp")`;
	
		for ($i = 0; $i < $cpSize; $i++)
			if ($cpLink[$i] < $cpSizeTarget)
			{
				$cpBuf = `xform -q -t -os ($nameSource + ".cp[" + $cpLink[$i] +"]")`;
				$cpTarget = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
				
				$cpBuf = `xform -q -t -os ($nameTarget + ".cp[" + $cpLink[$i] +"]")`;
				$cpTarget -= <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
				
				$cpSizeModify++;
				
				if (mag($cpTarget) > 0.0001)
				{	
					$cpBuf = `getAttr ($nameTarget + ".cp[" + $cpLink[$i] + "]")`;
					$cpTarget += <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
					setAttr ($nameTarget + ".cp[" + ($cpLink[$i]) + "]") ($cpTarget.x) ($cpTarget.y) ($cpTarget.z);
					progressBar -edit
    						-step 1
							$progressControl;
				}
		}
		
		// Update object state 
		
		move -r 0 0 0 ($nameTarget + ".cp[0]");
	}
	
	deleteUI -window Loading;	

	select -r $objects;
	
	waitCursor -state 0;
	
	return $cpSizeModify;
}
//-----------------------------------------------------------------------------------------------
global proc int	NZ_copySelectionInverse ()
{
	//destination 

	string $objects[];
	$objects [0] = `textFieldButtonGrp -q -tx fromShapeNameStr`;
		
	string $shapes[] = `ls -dag -s $objects`;
		
	//vertex

	string $cp[] = `filterExpand -sm 31 -sm 28`;
	
	
	int $cpSize = size($cp);
	
	if (($cpSize < 1) || (size($objects) == 0))
		error("Select Control Vertices or Polygon Vertices and destination surface!");
		
	if (1 < ((size(`ls -type mesh $shapes`) > 0) +
		(size(`ls -type nurbsSurface $shapes`) > 0) +
		(size(`ls -type nurbsCurve $shapes`) > 0)))
		error("Select the same type objects only!");
	
	string $cpShape[] = `listRelatives -p -f $cp`;
	$cpShape = `stringArrayRemoveDuplicates $cpShape`;
	
	if (size($cpShape) > 1)
		error("Select Vertices of single object!");
	
	string $cpType[] = `ls -st $cpShape[0]`;
	string $objectsType[] = `ls -st $shapes[0]`;
	
	if ($objectsType[1] != $cpType[1])
		error("Select the same type objects only!");
	
	string $index[];
	
	string $cmd;
	
	waitCursor -state 1;
	
	if ($objectsType[1] != "nurbsSurface")
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			for ($object in $objects)
				$cmd += " " + ($object + ".cp[" + $index[1] + "]");
		}
	else
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			for ($object in $objects)
				$cmd += " " + ($object + ".cv[" + $index[1] + "][" + $index[2] + "]");
		}
		
	eval ("select -r" + $cmd);
	
	waitCursor -state 0;
	
	return size(`ls -sl`);
} 

global proc int NZ_copySelectionProc ()
{
	//destination 

	string $objects[];
	$objects [0] = `textFieldButtonGrp -q -tx sourceSelectNameProcStr`;
		
	string $shapes[] = `ls -dag -s $objects`;
		
	//vertex

	string $cp[] = `filterExpand -sm 31 -sm 28`;
	
	
	int $cpSize = size($cp);
	
	if (($cpSize < 1) || (size($objects) == 0))
		error("Select Control Vertices or Polygon Vertices and destination surface!");
		
	if (1 < ((size(`ls -type mesh $shapes`) > 0) +
		(size(`ls -type nurbsSurface $shapes`) > 0) +
		(size(`ls -type nurbsCurve $shapes`) > 0)))
		error("Select the same type objects only!");
	
	string $cpShape[] = `listRelatives -p -f $cp`;
	$cpShape = `stringArrayRemoveDuplicates $cpShape`;
	
	if (size($cpShape) > 1)
		error("Select Vertices of single object!");
	
	string $cpType[] = `ls -st $cpShape[0]`;
	string $objectsType[] = `ls -st $shapes[0]`;
	
	if ($objectsType[1] != $cpType[1])
		error("Select the same type objects only!");
	
	string $index[];
	
	string $cmd;
	
	waitCursor -state 1;
	
	if ($objectsType[1] != "nurbsSurface")
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			for ($object in $objects)
				$cmd += " " + ($object + ".cp[" + $index[1] + "]");
		}
	else
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $index);
			for ($object in $objects)
				$cmd += " " + ($object + ".cv[" + $index[1] + "][" + $index[2] + "]");
		}
		
	eval ("select -r" + $cmd);
	
	waitCursor -state 0;
	
	return size(`ls -sl`);
}

//-----------------------------------------------------------------------------------------------
global proc NZ_doMirrorSelection()
{
	string $sourceShapeNameValue = `textFieldButtonGrp -q -tx sourceShapeNameStr`;
	string $axis;
	float  $toleranceValue = `floatSliderGrp -q -v toleranceStr`;
	float  $tolerance = `floatSliderGrp -q -v toleranceStr`;
	int	   $directionValue = `radioButtonGrp -q -sl axisRadioMirrorSelection`; 
	
	switch($directionValue) 
	{ 
		case 1: 
		$axis = "YZ";
		break;
		case 2: 
		$axis = "XZ"; 
		break;
		case 3: 
		$axis = "XY"; 
		break;
	}
	
	$directionValue--;
	
	int	$addReplaceValue = `radioButtonGrp -q -sl addReplaceStr`;
	int $direction = `checkBoxGrp -q -v1 inverseMirrorSelection`;
	
	$addReplaceValue--;
	
	int $exchangeMode = (`radioButtonGrp -q -sl addReplaceStr`- 1);
	
	if($exchangeMode == 1) 
	{
		NZ_mirrorSelection ($axis,0,0,$tolerance,$sourceShapeNameValue);
	}
	else
	{
		NZ_mirrorSelection ($axis,1,$direction,$tolerance,$sourceShapeNameValue);
	}


} 

//-----------------------------------------------------------------------------------------------

global proc NZ_mirrorSelection (string $axis, int $identical, int $invert, float $tolerance,string $sourceShape)
{	
	string $objects[];
	$objects[0] = $sourceShape;
	string $shapes[] = `ls -dag -s $objects`;

	string $cp[] = `filterExpand -sm 31 -sm 28`;
	
	int $cpSize = size($cp);

	if (!(($cpSize > 0) && (size($objects) < 2)))
		error("Select vertices and symmetric object if the object is not symmetric!");

	if (1 < ((size(`ls -type mesh $shapes`) > 0) +
		(size(`ls -type nurbsSurface $shapes`) > 0) +
		(size(`ls -type nurbsCurve $shapes`) > 0)))
		error("Select the same type objects only!");

	string $cpShape[] = `listRelatives -p -f $cp`;
	$cpShape = `stringArrayRemoveDuplicates $cpShape`;

	if (size($cpShape) > 1)
		error("Select Vertices of single object!");

	string $cpType[] = `ls -st $cpShape[0]`;
	string $objectsType[] = `ls -st $shapes[0]`;

	if (($cpSize > 0) && ($objectsType[1] != $cpType[1]) && (size($objects) > 0))
		error("Select the same type objects only!");

	waitCursor -state 1;

	string $nameDef, $nameSym, $nameTarget;

	if ($cpSize == 0)
	{	$nameDef = $shapes[0];
		$shapes = `ls -dag -s $objects[1]`;
		$cp = `ls -fl ($nameDef + ".cp[*]")`;
		$cpSize = size($cp);
	}
	else
		$nameDef = $cpShape[0];

	if (size($objects) > 0)
		$nameSym = $shapes[0];
	else	$nameSym = $nameDef;
	
	$objectsType = `ls -st $nameSym`;
	$nameTarget = $nameDef;
		
	int $cpLink[];
	string $cpIndex[];

	if ($objectsType[1] != "nurbsSurface")
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $cpIndex);
			$cpLink[int($cpIndex[1])] = 1;
		}
	else
	{	$cpInV = `getAttr ($nameDef + ".spansV")` + `getAttr ($nameDef + ".degreeV")`;
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $cpIndex);
			$cpLink[int($cpInV * int($cpIndex[1]) + int($cpIndex[2]))] = 1;
		}
	}

	int $cpCount, $cpCountDef;

	int $cpLinkZeroCount, $cpLinkPosCount, $cpLinkNegCount;
	int $cpLinksZero[], $cpLinksPositive[], $cpLinksNegative[];
	int $cpLinksSortPositive[], $cpLinksSortNegative[];

	int $flag, $flagGlobal;

	float $cpBuf[3];

	vector $cpSortArr[];

	int $assist = 0;
	vector $signVec = <<-1, 1, 1>>;
	
	$axis = toupper($axis);
	
	if ($axis == "XZ")
	{	$assist = 1;
		$signVec = <<1, -1, 1>>;
	}

	if ($axis == "XY")
	{	$assist = 2;
		$signVec = <<1, 1, -1>>;
	}
	
	$cpCount = `getAttr -size ($nameSym + ".cp")`;
	$cpCountDef = `getAttr -size ($nameDef + ".cp")`;

	// Sort points

	for ($currentPoint = 0; $currentPoint < $cpCount; $currentPoint++)
	{
		$cpBuf = `xform -q -t -os ($nameSym + ".cp[" + $currentPoint +"]")`;
		
		if (abs($cpBuf[$assist]) < $tolerance) 
		{	$cpLinksZero[$cpLinkZeroCount] = $currentPoint;
			$cpLinkZeroCount++;
		}
		else
		{
			if ($cpBuf[$assist] > 0)
			{	$cpLinksPositive[$cpLinkPosCount] = $currentPoint;
				$cpSortArr[$currentPoint] = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
				$cpLinkPosCount++;
			}

			else
			{	$cpLinksNegative[$cpLinkNegCount] = $currentPoint;
				$cpSortArr[$currentPoint] = <<$signVec.x * $cpBuf[0], $signVec.y * $cpBuf[1], $signVec.z * $cpBuf[2]>>;
				$cpLinkNegCount++;
			} 
		}
	}
	
	// Looking for points
	
	int $cpLinkCount;
	
	for ($currentPoint = 0; $currentPoint < $cpLinkPosCount; $currentPoint++)
	{
		$flag = 0;

		for ($lookPoint = $cpLinkCount; $lookPoint < $cpLinkNegCount; $lookPoint++)
			if (mag($cpSortArr[$cpLinksPositive[$currentPoint]] - $cpSortArr[$cpLinksNegative[$lookPoint]]) < $tolerance)
			{
				$cpLinksSortPositive[$cpLinkCount] = $cpLinksPositive[$currentPoint];
				$cpLinksSortNegative[$cpLinkCount] = $cpLinksNegative[$lookPoint];
				$cpLinksNegative[$lookPoint] = $cpLinksNegative[$cpLinkCount];
				$cpLinksNegative[$cpLinkCount] = $cpLinksSortNegative[$cpLinkCount];
				$cpLinkCount++;
				$flag++;
				break;
			}
			
		if ($flag == 0) $flagGlobal = 1;
	}
	
	$cpLinksPositive = $cpLinksSortPositive;
	$cpLinksNegative = $cpLinksSortNegative;
	
	// Select points

	string $cmd;
	
	for ($currentPoint = 0; $currentPoint < $cpLinkZeroCount; $currentPoint++)
		if ($cpLink[$cpLinksZero[$currentPoint]] == 1)
			$cmd += " " + ($nameTarget + ".cp[" + $cpLinksZero[$currentPoint] + "]");
	
	if ($identical == 0)
		for ($currentPoint = 0; $currentPoint < $cpLinkCount; $currentPoint++)
		{	if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
			{	
				if ($cpLink[$cpLinksNegative[$currentPoint]] == 1)
					$cmd += " " + ($nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]");
				if ($cpLink[$cpLinksPositive[$currentPoint]] == 1)
					$cmd += " " + ($nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]");
			}
		}
	else
		if (!$invert)
		{	for ($currentPoint = 0; $currentPoint < $cpLinkCount; $currentPoint++)
				if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
					if ($cpLink[$cpLinksPositive[$currentPoint]] == 1)
					{	$cmd += " " + ($nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]");
						$cmd += " " + ($nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]");
					}
		}
		else
		{	for ($currentPoint = 0; $currentPoint < $cpLinkCount; $currentPoint++)
				if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
					if ($cpLink[$cpLinksNegative[$currentPoint]] == 1)
					{	$cmd += " " + ($nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]");
						$cmd += " " + ($nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]");
					}
		}
	
	select -cl;
	eval ("select -r" + $cmd);

	waitCursor -state 0;

	print ("// ");
	print ("Result: " + size(`ls -sl -fl`) + "\n");
	
	string $warningStr;
	
	$shapes = `ls $nameSym`; $nameSym = $shapes[0];
	$shapes = `ls $nameDef`; $nameDef = $shapes[0];
	
	if (($cpLinkPosCount != $cpLinkNegCount) || ($flagGlobal == 1))
		$warningStr = "`" + $nameSym + "` is not symmetrical shape. ";

	if ($cpCountDef != $cpCount)
		$warningStr += "There are different vertices amount in `" + $nameSym + "` and `" + $nameDef + "` objects.";

	if ($warningStr != "") warning ($warningStr);
} 

//-----------------------------------------------------------------------------------------------

global proc NZ_doMirrorShapeProc(string $VtxProgressBar)
{
	string $sourceShapeNameValue = `textFieldButtonGrp -q -tx sourceShapeNameStr`;
	string $axis;
	float  $toleranceValue = `floatSliderGrp -q -v toleranceStr`;
	float  $tolerance = `floatSliderGrp -q -v toleranceStr`;
	int	   $directionValue = `radioButtonGrp -q -sl axisRadioMirrorSelection`; 

	
	switch($directionValue) 
	{ 
		case 1: 
		$axis = "YZ";
		break;
		case 2: 
		$axis = "XZ"; 
		break;
		case 3: 
		$axis = "XY"; 
		break;
	}
	
	$directionValue--;
	
	int	$addReplaceValue = `radioButtonGrp -q -sl addReplaceStr`;
	
	$addReplaceValue--;
	
	int $invertMode = (`radioButtonGrp -q -sl addReplaceStr`- 1);
	int $direction = `checkBoxGrp -q -v1 inverseMirrorSelection`;

	if($invertMode == 1)
	{
		NZ_mirrorShape ($axis,0,1,0,$tolerance,$sourceShapeNameValue,$VtxProgressBar);
	}
	else
	{
		if($direction == 0) NZ_mirrorShape ($axis,1,0,0,$tolerance,$sourceShapeNameValue,$VtxProgressBar);

		else  NZ_mirrorShape ($axis,1,1,0,$tolerance,$sourceShapeNameValue,$VtxProgressBar);
	}
	if (`window -ex "ProgressSimpleSymProc"` )
	deleteUI -window ProgressSimpleSymProc;
} 

//-----------------------------------------------------------------------------------------------

global proc NZ_mirrorShape (string $axis, int $identical, int $invert, int $target, float $tolerance,string $sourceShape,string $VtxProgressBar)
{	
	string $objects[];
	$objects[0] = $sourceShape;
	
	string $shapes[] = `ls -dag -s $objects`;

	string $cp[] = `filterExpand -sm 31 -sm 28`;
	int $cpSize = size($cp);

	if (!((($cpSize == 0) && (size($objects) == 2)) || (($cpSize > 0) && (size($objects) == 1))))
		error("Select source object or its components and symmetric object!");

	if (1 < ((size(`ls -type mesh $shapes`) > 0) +
		(size(`ls -type nurbsSurface $shapes`) > 0) +
		(size(`ls -type nurbsCurve $shapes`) > 0)))
		error("Select the same type objects only!");

	string $cpShape[] = `listRelatives -p -f $cp`;
	$cpShape = `stringArrayRemoveDuplicates $cpShape`;


	if (size($cpShape) > 1)
		error("Select Vertices of single object!");

	string $cpType[] = `ls -st $cpShape[0]`;
	string $objectsType[] = `ls -st $shapes[0]`;

	if (($cpSize > 0) && ($objectsType[1] != $cpType[1]))
		error("Select the same type objects only!");

	waitCursor -state 1;

	string $nameDef, $nameSym, $nameTarget;

	if ($cpSize == 0)
	{	$nameDef = $shapes[0];
		$shapes = `ls -dag -s $objects[1]`;
		$cp = `ls -fl ($nameDef + ".cp[*]")`;
		$cpSize = size($cp);
					//progressBar -edit -step 1 $VtxProgressBar;
	}
	else
		$nameDef = $cpShape[0];

	$nameSym = $shapes[0];

	if ($target == 1)
	
	$nameTarget = $nameSym;
	
	else	$nameTarget = $nameDef;
		
	int $cpLink[];
	string $cpIndex[];

	if ($objectsType[1] != "nurbsSurface")
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $cpIndex);
			$cpLink[int($cpIndex[1])] = 1;
					//progressBar -edit -step 1 $VtxProgressBar;
		}
	else
	{	$cpInV = `getAttr ($nameDef + ".spansV")` + `getAttr ($nameDef + ".degreeV")`;
		for ($i = 0; $i < $cpSize; $i++)
		{	tokenize ($cp[$i], "[]", $cpIndex);
			$cpLink[int($cpInV * int($cpIndex[1]) + int($cpIndex[2]))] = 1;
					//progressBar -edit -step 1 $VtxProgressBar;
		}
	}

	int $cpCount, $cpCountDef;

	int $cpLinkZeroCount, $cpLinkPosCount, $cpLinkNegCount;
	int $cpLinksZero[], $cpLinksPositive[], $cpLinksNegative[];
	int $cpLinksSortPositive[], $cpLinksSortNegative[];

	int $cpIndexLink;
	int $flag, $flagGlobal;

	float $cpBuf[3];

	vector $cpSymArr[], $cpDefArr[], $cpLocArr[], $cpSortArr[], $cpTarArr[];
	vector $cpBufVec;

	int $assist = 0;
	
	vector $signVec = <<-1, 1, 1>>;
	vector $zeroVec = <<0, 1, 1>>;
	
	$axis = toupper($axis);
	
	if ($axis == "XZ")
	{	$assist = 1;
		$signVec = <<1, -1, 1>>;
		$zeroVec = <<1, 0, 1>>;
	}

	if ($axis == "XY")
	{	$assist = 2;
		$signVec = <<1, 1, -1>>;
		$zeroVec = <<1, 1, 0>>;
	}
	
	$cpCount = `getAttr -size    ($nameSym + ".cp")`;
	$cpCountDef = `getAttr -size ($nameDef + ".cp")`;

	// Sort points

	for ($currentPoint = 0; $currentPoint < $cpCount; $currentPoint++)
	{
		$cpBuf = `getAttr ($nameTarget + ".cp[" + $currentPoint + "]")`;
		$cpLocArr[$currentPoint] = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
		
		$cpBuf = `xform -q -t -os ($nameDef + ".cp[" + $currentPoint +"]")`;
		$cpDefArr[$currentPoint] = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
		
		$cpBuf = `xform -q -t -os ($nameSym + ".cp[" + $currentPoint +"]")`;
		$cpSymArr[$currentPoint] = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
		
		if (abs($cpBuf[$assist]) < $tolerance) 
		{	$cpLinksZero[$cpLinkZeroCount] = $currentPoint;
			$cpLinkZeroCount++;
					//progressBar -edit -step 1 $VtxProgressBar;
		}
		else
		{
			if ($cpBuf[$assist] > 0)
			{	$cpLinksPositive[$cpLinkPosCount] = $currentPoint;
				$cpSortArr[$currentPoint] = <<$cpBuf[0], $cpBuf[1], $cpBuf[2]>>;
				$cpLinkPosCount++;
					//progressBar -edit -step 1 $VtxProgressBar;
			}

			else
			{	$cpLinksNegative[$cpLinkNegCount] = $currentPoint;
				$cpSortArr[$currentPoint] = <<$signVec.x * $cpBuf[0], $signVec.y * $cpBuf[1], $signVec.z * $cpBuf[2]>>;
				$cpLinkNegCount++;
					//progressBar -edit -step 1 $VtxProgressBar;
			} 
					//progressBar -edit -step 1 $VtxProgressBar;
		}
	}

	// Looking for points
	
	int $cpLinkCount;
		
	for ($currentPoint = 0; $currentPoint < $cpLinkPosCount; $currentPoint++)
	{
		$flag = 0;

		for ($lookPoint = $cpLinkCount; $lookPoint < $cpLinkNegCount; $lookPoint++)
			if (mag($cpSortArr[$cpLinksPositive[$currentPoint]] - $cpSortArr[$cpLinksNegative[$lookPoint]]) < $tolerance)
			{
				$cpLinksSortPositive[$cpLinkCount] = $cpLinksPositive[$currentPoint];
				$cpLinksSortNegative[$cpLinkCount] = $cpLinksNegative[$lookPoint];
				$cpLinksNegative[$lookPoint] = $cpLinksNegative[$cpLinkCount];
				$cpLinksNegative[$cpLinkCount] = $cpLinksSortNegative[$cpLinkCount];
				$cpLinkCount++;
				$flag++;
				break;
					//progressBar -edit -step 1 $VtxProgressBar;
			}

		if ($flag == 0) $flagGlobal = 1;
					//progressBar -edit -step 1 $VtxProgressBar;
	}

	$cpLinksPositive = $cpLinksSortPositive;
	$cpLinksNegative = $cpLinksSortNegative;
	
	if ($target == 1)
		$cpTarArr = $cpSymArr;
	else	$cpTarArr = $cpDefArr;
					//progressBar -edit -step 1 $VtxProgressBar;
	
	// Replace points (new -old + local)

	int $cpCountMirror, $cpCountChange;
	
	if ($identical == 0)
	{
		for ($currentPoint = 0; $currentPoint < $cpLinkZeroCount; $currentPoint++)
		{	if ($cpLink[$cpLinksZero[$currentPoint]] > 0) 
			{	
				$cpCountMirror++;
				$cpBufVec = $cpDefArr[$cpLinksZero[$currentPoint]];
				$cpBufVec = <<($signVec.x * $cpBufVec.x), ($signVec.y * $cpBufVec.y), ($signVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksZero[$currentPoint]];
				if (mag($cpBufVec) > $tolerance)
				{	$cpLocArr[$cpLinksZero[$currentPoint]] += $cpBufVec;
					eval("setAttr " + $nameTarget + ".cp[" + $cpLinksZero[$currentPoint] + "]" + $cpLocArr[$cpLinksZero[$currentPoint]]);
					$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
				}
					//progressBar -edit -step 1 $VtxProgressBar;
			}
					//progressBar -edit -step 1 $VtxProgressBar;
		}

		for ($currentPoint = 0; $currentPoint < $cpLinkCount; $currentPoint++)
		{	if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
			{	
				$cpCountMirror += 2;
				$cpBufVec = $cpDefArr[$cpLinksPositive[$currentPoint]];
				$cpBufVec = <<($signVec.x * $cpBufVec.x), ($signVec.y * $cpBufVec.y), ($signVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksNegative[$currentPoint]];
				if (mag($cpBufVec) > $tolerance)
				{	$cpLocArr[$cpLinksNegative[$currentPoint]] += $cpBufVec;
					eval("setAttr " + $nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]" + $cpLocArr[$cpLinksNegative[$currentPoint]]);
					$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
				}
				$cpBufVec = $cpDefArr[$cpLinksNegative[$currentPoint]];
				$cpBufVec = <<($signVec.x * $cpBufVec.x), ($signVec.y * $cpBufVec.y), ($signVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksPositive[$currentPoint]];
				if (mag($cpBufVec) > $tolerance)
				{	$cpLocArr[$cpLinksPositive[$currentPoint]] += $cpBufVec;
					eval("setAttr " + $nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]" + $cpLocArr[$cpLinksPositive[$currentPoint]]);
					$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
				}
					//progressBar -edit -step 1 $VtxProgressBar;
			}
		}
	}
	else
	{
		for ($currentPoint = 0; $currentPoint < $cpLinkZeroCount; $currentPoint++)
		{
			if ($cpLink[$cpLinksZero[$currentPoint]] > 0)
			{
				$cpCountMirror++;
				$cpBufVec = $cpDefArr[$cpLinksZero[$currentPoint]];
				$cpBufVec = <<($zeroVec.x * $cpBufVec.x), ($zeroVec.y * $cpBufVec.y), ($zeroVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksZero[$currentPoint]];
				if (mag($cpBufVec) > $tolerance)
				{	$cpLocArr[$cpLinksZero[$currentPoint]] += $cpBufVec;
					eval("setAttr " + $nameTarget + ".cp[" + $cpLinksZero[$currentPoint] + "]" + $cpLocArr[$cpLinksZero[$currentPoint]]);
					$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
				}
					//progressBar -edit -step 1 $VtxProgressBar;
				
			}
		}

		if (!$invert)
		{
			for ($currentPoint = 0; $currentPoint < $cpLinkCount; $currentPoint++)
			{	if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
				{
					$cpCountMirror += 2;
					$cpBufVec = $cpDefArr[$cpLinksPositive[$currentPoint]];
					$cpBufVec = <<($signVec.x * $cpBufVec.x), ($signVec.y * $cpBufVec.y), ($signVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksNegative[$currentPoint]];
					if (mag($cpBufVec) > $tolerance)
					{	$cpLocArr[$cpLinksNegative[$currentPoint]] += $cpBufVec;
						eval("setAttr " + $nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]" + $cpLocArr[$cpLinksNegative[$currentPoint]]);
						$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
					}
					$cpBufVec = $cpDefArr[$cpLinksPositive[$currentPoint]] - $cpTarArr[$cpLinksPositive[$currentPoint]];
					if (mag($cpBufVec) > $tolerance)
					{	$cpLocArr[$cpLinksPositive[$currentPoint]] += $cpBufVec;
						eval("setAttr " + $nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]" + $cpLocArr[$cpLinksPositive[$currentPoint]]);
						$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
					}	
					//progressBar -edit -step 1 $VtxProgressBar;
				}
					//progressBar -edit -step 1 $VtxProgressBar;
			}
		}
		else
		{
			for ($currentPoint = 0; $currentPoint < $cpLinkPosCount; $currentPoint++)
			{	if (($cpLink[$cpLinksNegative[$currentPoint]] + $cpLink[$cpLinksPositive[$currentPoint]]) > 0)
				{
					$cpCountMirror += 2;
					$cpBufVec = $cpDefArr[$cpLinksNegative[$currentPoint]];
					$cpBufVec = <<($signVec.x * $cpBufVec.x), ($signVec.y * $cpBufVec.y), ($signVec.z * $cpBufVec.z)>> - $cpTarArr[$cpLinksPositive[$currentPoint]];
					if (mag($cpBufVec) > $tolerance)
					{	$cpLocArr[$cpLinksPositive[$currentPoint]] += $cpBufVec;
						eval("setAttr " + $nameTarget + ".cp[" + $cpLinksPositive[$currentPoint] + "]" + $cpLocArr[$cpLinksPositive[$currentPoint]]);
						$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
					}
					$cpBufVec = $cpDefArr[$cpLinksNegative[$currentPoint]] - $cpTarArr[$cpLinksNegative[$currentPoint]];
					if (mag($cpBufVec) > $tolerance)
					{	$cpLocArr[$cpLinksNegative[$currentPoint]] += $cpBufVec;
						eval("setAttr " + $nameTarget + ".cp[" + $cpLinksNegative[$currentPoint] + "]" + $cpLocArr[$cpLinksNegative[$currentPoint]]);
						$cpCountChange++;
					//progressBar -edit -step 1 $VtxProgressBar;
					}
				}
			}

		}
	}
	
	// Update object state

	print ("\nNameTarget =  "+ $nameTarget);
	move -r 0 0 0 ($nameTarget + ".cp[0]");

	waitCursor -state 0;

	select $nameTarget;

	print ("// ");
	print ("Result: " + $cpCountChange + " mirrored: " + $cpCountMirror + " symmetric vertices of " + $cpSize + " selected.\n");

	string $warningStr;

	$shapes = `ls $nameSym`; $nameSym = $shapes[0];
	$shapes = `ls $nameDef`; $nameDef = $shapes[0];
	
	if (($cpLinkPosCount != $cpLinkNegCount) || ($flagGlobal == 1))
		$warningStr = "`" + $nameSym + "` is not symmetrical shape. ";

	if ($cpCountDef != $cpCount)
		$warningStr += "There are different vertices amount in `" + $nameSym + "` and `" + $nameDef + "` objects.";

	if ($warningStr != "") warning ($warningStr);
	
//	progressBar -edit -endProgress $VtxProgressBar;

} 

//-----------------------------------------------------------------------------------------------

global proc updateFromShapeName()
{
	string $newName[]=`filterExpand -sm 12`;
	textFieldButtonGrp -e -tx ($newName[0]) fromShapeNameStr;
	select -cl;
} 

//-----------------------------------------------------------------------------------------------

global proc updateSourceShapeName()
{
	string $newName[]=`filterExpand -sm 12`;
	textFieldButtonGrp -e -tx ($newName[0]) sourceShapeNameStr;
	select -cl;
}

//-----------------------------------------------------------------------------------------------

global proc updateSourceSelectionNameProc()
{
	string $newName[]=`filterExpand -sm 12`;
	textFieldButtonGrp -e -tx ($newName[0]) sourceSelectNameProcStr;
	select -cl;
}

//-----------------------------------------------------------------------------------------------

global proc updateSourceSetSelectionName()
{
	string $newName[]=`ls -sl`;
	textFieldButtonGrp -e -tx ($newName[0]) sourceSetSelectNameStr;
	select -cl;
}

//-----------------------------------------------------------------------------------------------


global proc NZ_ApplyProc(string $ObjProgressBar,string $currentObj,string $VtxProgressBar)
{

int $nonSymmetrical = `checkBoxGrp -q -v1 doCorrectiveShapeNonSymetrical`;

	string $ObjToMirror[] = `ls -sl`;
waitCursor -state on; 


if	($nonSymmetrical == 0)
	{
	// proc pour objet Symmetrique
	string $sourceSetSelectName = `textFieldButtonGrp -q -tx sourceSetSelectNameStr`;
	string $ObjToMirror[] = `ls -sl`;
	
	int $i;
	for ($i=0;$i<size($ObjToMirror);$i++)
		{	
		select -r $ObjToMirror[$i];
		updateSourceSelectionNameProc;
		select -r -ne $sourceSetSelectName;
		SelectHierarchy;
		NZ_copySelectionProc();
		NZ_doMirrorShapeProc($VtxProgressBar);
		//progressBar -edit -step 1 $ObjProgressBar;
		}
	waitCursor -state off; 
	}
else
	{
	// proc pour objet non Symmetrique
	int $i;
	for ($i=0;$i<size($ObjToMirror);$i++)	
		{	
		string $sourceGeo = `textFieldButtonGrp -q -tx fromShapeNameStr`;
		string $symGeo = `textFieldButtonGrp -q -tx sourceShapeNameStr`;
		string $sourceSetSelectName = `textFieldButtonGrp -q -tx sourceSetSelectNameStr`;

		select -r $symGeo;
		duplicate -rr -st;
		string $selTempA[]=`ls -sl`;
		rename $selTempA "ShapeTempForSym";

		select -r $ObjToMirror[$i] $sourceGeo ShapeTempForSym;
		blendShape -tc 0 -n "blendShapeTempForSym";
		string $Eval ="setAttr "+"blendShapeTempForSym." + $sourceGeo  + " -1; setAttr "+"blendShapeTempForSym." + $ObjToMirror[$i]  + " 1;";
		eval($Eval);
		select -r ShapeTempForSym;
		DeleteHistory;

		updateSourceSelectionNameProc;
		select -r -ne $sourceSetSelectName;
		SelectHierarchy;
		NZ_copySelectionProc();
		NZ_doMirrorShapeProc($VtxProgressBar);

		select -r $symGeo;
		duplicate -rr -st;
		string $selTempA[]=`ls -sl`;
		rename $selTempA "ShapeTemp";

		select -r  $sourceGeo ShapeTempForSym ShapeTemp;
		blendShape -tc 0 -n "blendShapeTempForSym";
		string $Eval ="setAttr "+"blendShapeTempForSym." + $sourceGeo  + " 1; setAttr "+"blendShapeTempForSym." + "ShapeTempForSym "  + " 1;";
		eval($Eval);

		select -r "ShapeTemp" $ObjToMirror[$i];
		blendShape -tc 0 -n "blendShapeBack";
		string $Eval ="setAttr "+"blendShapeBack." + "ShapeTemp "  + " 1;";
		eval($Eval);

		select -r $ObjToMirror[$i];
		DeleteHistory;
		delete ShapeTempForSym ShapeTemp;

		select -r $ObjToMirror[$i];
		updateSourceSelectionNameProc;
		
		}
	waitCursor -state off; 
	
	}

	//deleteUI -window ProgressAssymProc;
}


//-----------------------------------------------------------------------------------------------


global proc NZ_ApplyProcUI ()
{
	global string $ObjProgressBar;
	global string $VtxProgressBar;
	global string $currentObj;
	float $sizeObj= size(`ls -sl`);
	string $currentObjet[]=`ls -sl`;

	string $sourceSetSelectName = `textFieldButtonGrp -q -tx sourceSetSelectNameStr`;
	string $setsVtx[] =`sets -q $sourceSetSelectName`;
	int $sizeVtx = size($setsVtx)*size($setsVtx)*size($setsVtx);

	//string $windowUI = `window -title "Symmetry in progress..." -widthHeight 400 150 ProgressSimpleSymProc`;
		//rowColumnLayout -numberOfColumns 2
    		//-columnWidth 1 100
    		//-columnWidth 2 300;

	//text -label "";
	//text -label "";

	//text -label "";
	//text -label $currentObjet;


    	//text -label "Objet In Progress";
    	//$ObjProgressBar = `progressBar -maxValue $sizeObj  -width 280`;

	//text -label "";
	//text -label "";

    	//text -label "Current Objet IP";
    	//$VtxProgressBar = `progressBar -maxValue $sizeVtx -width 280` ;

		//showWindow $windowUI;
		evalDeferred("NZ_ApplyProc($ObjProgressBar,$currentObj,$VtxProgressBar)");

}

//-----------------------------------------------------------------------------------------------

global proc NZ_ApplyUI ()
{
	global string $VtxProgressBar;
	string $currentSel[] = `ls -sl`;
	string $currentObj[] = `listRelatives -parent $currentSel[0]`;
	string $cp[] = `filterExpand -sm 31 -sm 28`;
	int $sizeVtx = size($cp)*100;

string $windowUI = `window -title "Symmetry in progress..." -widthHeight 400 150 ProgressSymProc`;
		rowColumnLayout -numberOfColumns 2
    		-columnWidth 1 100
    		-columnWidth 2 300;

	text -label "";
	text -label "";

	text -label "";
	text -label $currentObj;


    	text -label "Current Objet IP";
    	$VtxProgressBar = `progressBar -maxValue $sizeVtx -width 280` ;

		showWindow $windowUI;
		evalDeferred("NZ_doMirrorShapeProc($VtxProgressBar)");

}
